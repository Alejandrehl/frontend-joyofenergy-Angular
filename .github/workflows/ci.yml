name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run unit tests
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/angular-frontend-developer-joyofenergy/coverage-summary.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Check test coverage threshold
      run: |
        # Extract coverage percentage from coverage report
        COVERAGE=$(node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/angular-frontend-developer-joyofenergy/coverage-summary.json', 'utf8'));
          const statements = coverage.total.statements.pct;
          const lines = coverage.total.lines.pct;
          console.log(Math.min(statements, lines));
        ")
        
        echo "Current coverage: $COVERAGE%"
        
        # Check if coverage is at least 80%
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage is below 80% threshold. Current: $COVERAGE%"
          exit 1
        else
          echo "✅ Coverage meets 80% threshold. Current: $COVERAGE%"
        fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run all quality checks
      run: |
        echo "🔍 Running comprehensive quality checks..."
        
        # Linting
        echo "📝 Checking code style..."
        npm run lint
        
        # Formatting
        echo "🎨 Checking code formatting..."
        npm run format:check
        
        # Tests with coverage
        echo "🧪 Running tests with coverage..."
        npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
        
        # Build
        echo "🏗️ Building application..."
        npm run build
        
        echo "✅ All quality checks passed!"
        
    - name: Quality Gate Summary
      run: |
        echo "🎉 Quality Gate Results:"
        echo "✅ Linting: PASSED"
        echo "✅ Formatting: PASSED"
        echo "✅ Tests: PASSED"
        echo "✅ Coverage: PASSED (80%+ threshold)"
        echo "✅ Build: PASSED"
        echo ""
        echo "🚀 Project is ready for deployment!" 